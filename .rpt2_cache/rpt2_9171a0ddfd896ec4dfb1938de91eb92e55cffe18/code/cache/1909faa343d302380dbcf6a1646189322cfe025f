{"map":"{\"version\":3,\"file\":\"interceptorManager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/core/interceptorManager.ts\"],\"names\":[],\"mappings\":\"AAOA;IAEI;QACI,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IAC3B,CAAC;IAED,QAAQ;IACR,gCAAG,GAAH,UAAI,QAAsB,EAAE,QAAoB;QAC5C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;YACnB,QAAQ,UAAA;YACR,QAAQ,UAAA;SACX,CAAC,CAAA;QACF,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;IACxC,CAAC;IAED,YAAY;IACZ,oCAAO,GAAP,UAAQ,EAAyC;QAC7C,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAA,WAAW;YACjC,IAAI,WAAW,KAAK,IAAI,EAAE;gBACtB,EAAE,CAAC,WAAW,CAAC,CAAC;aACnB;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED,UAAU;IACV,kCAAK,GAAL,UAAM,EAAU;QACZ,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE;YACvB,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;SAChC;IACL,CAAC;IAEL,yBAAC;AAAD,CAAC,AA/BD,IA+BC\"}","code":"var InterceptorManager = /** @class */ (function () {\r\n    function InterceptorManager() {\r\n        this.interceptors = [];\r\n    }\r\n    // 添加拦截器\r\n    InterceptorManager.prototype.use = function (resolved, rejected) {\r\n        this.interceptors.push({\r\n            resolved: resolved,\r\n            rejected: rejected\r\n        });\r\n        return this.interceptors.length - 1;\r\n    };\r\n    // 暴露已添加的拦截器\r\n    InterceptorManager.prototype.forEach = function (fn) {\r\n        this.interceptors.forEach(function (interceptor) {\r\n            if (interceptor !== null) {\r\n                fn(interceptor);\r\n            }\r\n        });\r\n    };\r\n    // 删除指定拦截器\r\n    InterceptorManager.prototype.eject = function (id) {\r\n        if (this.interceptors[id]) {\r\n            this.interceptors[id] = null;\r\n        }\r\n    };\r\n    return InterceptorManager;\r\n}());\r\nexport default InterceptorManager;\r\n//# sourceMappingURL=interceptorManager.js.map","dts":{"name":"/Users/nan/Desktop/ts-axios/dist/types/core/interceptorManager.d.ts","writeByteOrderMark":false,"text":"import { ResolveFn, RejectedFn } from '../types';\r\ninterface Interceptor<T> {\r\n    resolved: ResolveFn<T>;\r\n    rejected?: RejectedFn;\r\n}\r\nexport default class InterceptorManager<T> {\r\n    private interceptors;\r\n    constructor();\r\n    use(resolved: ResolveFn<T>, rejected: RejectedFn): number;\r\n    forEach(fn: (interceptor: Interceptor<T>) => void): void;\r\n    eject(id: number): void;\r\n}\r\nexport {};\r\n"}}
